import asyncpg
import asyncio
from config import config
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

####################################################################################
# –ë–ª–æ–∫ User
####################################################################################


"""–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å—Ç–∞–∂
@dp.message_handlers(commands='–°—Ç–∞–∂')"""


async def staj_user(message: types.Message):
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    id_user = message.from_id
    staj = await conn.fetchrow('''
        select * from staj($1)
         ''', id_user)
    await conn.close()
    await message.answer("üìã –í–∞—à —Å—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: | " + str(staj[0]) + " –ª–µ—Ç üéâüéä")


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è zp
async def zp_user(message: types.Message):
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    id_user = message.from_id
    zp = await conn.fetchrow('''
        select * from zp($1)
         ''', id_user)
    await conn.close()
    await message.answer("üí∏  –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: | " + str(zp[0]) + "—Ä—É–±  üí∏")


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è prize
async def prize_user(message: types.Message):
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    id_user = message.from_id
    prize = await conn.fetchrow('''
        select * from prize($1)
         ''', id_user)
    await conn.close()
    await message.answer("üéâ  –í–∞—à–∞ –ø—Ä–µ–º–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: | " + str(prize[0]) + "—Ä—É–±  üéâ")


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è tool
async def tool_user(message: types.Message):
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    id_user = message.from_id
    tools = await conn.fetch('''
        select "–ù–∞–∑–≤–∞–Ω–∏–µ_–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" from "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        join "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π" –°–õ on –°–õ."–ù–æ–º–µ—Ä_–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞" = "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"."–ù–æ–º–µ—Ä_–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞"      
        where id_tg=$1
         ''', id_user)
    await conn.close()
    str_tools = "üõ†  Ô∏è–í–∞—à–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n"
    for tool in tools:
        str_tools += "\nüìå  " + str(tool[0])
    await message.answer(str_tools)


####################################################################################
# –ë–ª–æ–∫ Admin
####################################################################################

"""–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""


async def get_users(message: types.Message):
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π"''')
    await conn.close()
    str_row = "<b>ID | NAME | FAM | PROF </b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]) + " | " + str(row[2]) + " | " + str(row[3]))
    await message.answer(str_row, parse_mode="HTML")


"""–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""


async def get_equip(message: types.Message):
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"''')
    await conn.close()
    str_row = "<b>ID_EQUIP | ID_LAB | ID_EMPL | NAME_EQUIP </b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]) + " | " + str(row[2]) + " | " + str(row[3]))
    await message.answer(str_row, parse_mode="HTML")


async def lab_fail(message: types.Message):
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã lab fail
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from laboratories_fail''')
    await conn.close()
    str_row = "<b>Name LAB </b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]))
    await message.answer("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–º–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏\n\n" + str_row, parse_mode="HTML")


async def prod_proc(message: types.Message):
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã product_process
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "product_process"''')
    await conn.close()
    str_row = "<b>ID_PROD</b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]))
    await message.answer("–ò–∑–¥–µ–ª–∏—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ:\n\n" + str_row, parse_mode="HTML")


async def max_prod(message: types.Message):
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã max_prod
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetchrow('''select max_product()''')
    await conn.close()
    str_row = "<b>ID_–£–ß</b>" + " | " + "<b>Count</b>" + f"\n {rows[0][0]}" + "      |        " + f"{rows[0][1]}"
    await message.answer("–£—á–∞—Å—Ç–æ–∫ —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –∫–æ–ª-–≤–æ–º –∏–∑–¥–µ–ª–∏–π:\n\n" + str_row, parse_mode="HTML")


async def good_empl(message: types.Message):
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã good_employee
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetchrow('''select good_employee()''')
    await conn.close()
    str_row = "<b>ID_–£–ß</b>" + "                | " + "<b>Count</b>" + f"\n {rows[0][0]}" + "      |        " + f"{rows[0][1]}"
    await message.answer("–°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫:\n\n" + str_row, parse_mode="HTML")


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
####################################################################################


"""–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –µ—ë —ç—Ç–∞–ø–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""


class FSMAdmin(StatesGroup):
    firstname_empl = State()
    surname_empl = State()
    profession = State()

    id_empl = State()
    del_empl = State()

    id_empl_staj = State()
    upd_staj = State()

    id_empl_prize = State()
    upd_prize_count = State()
    upd_prize = State()

    id_empl_tg = State()
    upd_tg = State()

    id_empl_equip_del = State()
    del_equip = State()

    name_equip = State()
    id_equip_empl_add = State()
    id_equip_lab = State()


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ AddUser
####################################################################################


"""–û—Ç–º–µ–Ω–∞ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handlers(state="*", commands="/–û—Ç–º–µ–Ω–∞")"""


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–í—Å—ë –æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç—É!")
        return 0
    await state.finish()
    await message.answer("END!!!")


"""–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ò–º—è
@dp.message_handlers(commands='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', state=None)"""


async def cm_start_add(message: types.Message):
    await FSMAdmin.firstname_empl.set()
    await message.answer("|...–ó–∞–ø—É—Å–∫ –î–∏–∞–ª–æ–≥–∞...|\n|...–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>¬´–û—Ç–º–µ–Ω–∞¬ª</b>...|\n\n–í–≤–µ–¥–∏—Ç–µ –ò–º—è",
                         parse_mode="HTML")


"""–ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –§–∞–º–∏–ª–∏—é
@dp.message_handlers(state=FSMAdmin.firstname_empl)"""


async def load_firstname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['firstname'] = message.text
    await FSMAdmin.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é")


"""–ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ü—Ä–æ—Ñ–µ—Å—Å–∏—é
@dp.message_handlers(state=FSMAdmin.surname_empl)"""


async def load_surname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['surname'] = message.text
    await FSMAdmin.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")


"""–ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handlers(state=FSMAdmin.profession)"""


async def load_profession(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['profession'] = message.text

        try:
            conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                         database=config.database, host=config.host, port=config.port_bd)
        except:
            print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
            exit()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ User
        try:
            await conn.execute('''call add_employee($1,$2,$3)
            ''', data["firstname"], data["surname"], data["profession"])
            await message.answer(
                f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å!!!\n\n"
                f"–ò–º—è: {data['firstname']}\n"
                f"–§–∞–º–∏–ª–∏—è: {data['surname']}\n"
                f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {data['profession']}"
                f"\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!!!")
        except:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ù–ï –¥–æ–±–∞–≤–∏–ª–∏—Å—å")

    await state.finish()


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ DeleteUser
####################################################################################


"""–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, –°–ø—Ä–∞—à–∏–≤–∞–µ–º id
@dp.message_handlers(commands='DeleteUser', state=None)"""


async def cm_start_del(message: types.Message):
    await FSMAdmin.id_empl.set()
    await message.answer(
        "|...–ó–∞–ø—É—Å–∫ –î–∏–∞–ª–æ–≥–∞...|\n|...–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>¬´–û—Ç–º–µ–Ω–∞¬ª</b>...|"
        "\n\n–í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –£–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML")

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π"''')
    await conn.close()
    str_row = "<b>ID | NAME | FAM | PROF </b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]) + " | " + str(row[2]) + " | " + str(row[3]))
    await message.answer(str_row, parse_mode="HTML")


async def del_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_user'] = message.text
        if data['id_user'] in ['1', '2', '3', '4', '5']:
            await message.answer("–≠—Ç–æ –ª—É—á—à–µ –Ω–µ —É–¥–∞–ª—è—Ç—å :)")
            await state.finish()
            return 0
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                             database=config.database, host=config.host, port=config.port_bd)
            except:
                print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
                exit()

            try:
                await conn.execute('''call del_user($1)''', int(data['id_user']))
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {data['id_user']} —É–¥–∞–ª—ë–Ω!!!")
            except:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id = {data['id_user']} –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å...")

            await conn.close()
            await state.finish()


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ +–°—Ç–∞–∂
####################################################################################


async def cm_start_staj(message: types.Message):
    await FSMAdmin.id_empl_staj.set()
    await message.answer(
        "|...–ó–∞–ø—É—Å–∫ –î–∏–∞–ª–æ–≥–∞...|\n|...–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>¬´–û—Ç–º–µ–Ω–∞¬ª</b>..."
        "|\n\n–í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∂–∞:",
        parse_mode="HTML")

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π"''')
    await conn.close()
    str_row = "<b>ID | NAME | FAM | PROF </b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]) + " | " + str(row[2]) + " | " + str(row[3]))
    await message.answer(str_row, parse_mode="HTML")


async def update_staj(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_user'] = message.text

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    try:
        await conn.execute('''call updating_experience($1)''', int(data['id_user']))
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {data['id_user']} –ø–æ—Å—Ç–∞—Ä–µ–ª!!!")
    except:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {data['id_user']} –Ω–µ —Å–º–æ–≥ –ø–æ—Å—Ç–∞—Ä–µ—Ç—å...")

    await conn.close()
    await state.finish()


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ +–ü—Ä–µ–º–∏—è
####################################################################################


async def cm_start_prize_upd(message: types.Message):
    await FSMAdmin.id_empl_prize.set()
    await message.answer(
        "|...–ó–∞–ø—É—Å–∫ –î–∏–∞–ª–æ–≥–∞...|\n|...–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>¬´–û—Ç–º–µ–Ω–∞¬ª"
        "</b>...|\n\n–í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏–∏:",
        parse_mode="HTML")

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π"''')
    await conn.close()
    str_row = "<b>ID | NAME | FAM | PROF </b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]) + " | " + str(row[2]) + " | " + str(row[3]))
    await message.answer(str_row, parse_mode="HTML")


async def update_prize_coun(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_user'] = message.text
    await FSMAdmin.next()
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø—Ä–µ–º–∏–∏?")


async def upd_prize_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['prize'] = message.text
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–µ–º–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    try:
        await conn.execute('''call updating_prize($1, $2)''', int(data['id_user']), int(data['prize']))
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {data['id_user']} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—é = {data['prize']} !!!")
    except:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {data['id_user']} –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—é = {data['prize']}...")

    await conn.close()
    await state.finish()


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ UPD_TG
####################################################################################


async def cm_start_tg_id(message: types.Message):
    await FSMAdmin.id_empl_tg.set()
    await message.answer(
        "|...–ó–∞–ø—É—Å–∫ –î–∏–∞–ª–æ–≥–∞...|\n|...–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>¬´–û—Ç–º–µ–Ω–∞¬ª</b>...|"
        "\n\n–í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è TG_ID:",
        parse_mode="HTML")

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select "–ù–æ–º–µ—Ä_–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞", "–§–∞–º–∏–ª–∏—è", id_tg from "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π"''')
    await conn.close()
    str_row = "<b>ID | FAM | TG_ID</b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]) + " | " + str(row[2]))
    await message.answer(str_row, parse_mode="HTML")
    await conn.close()


async def update_tg_id_get(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_user'] = message.text
        if data['id_user'] not in ['1', '2', '3', '4', '5']:
            await FSMAdmin.next()
            await message.answer("–ö–∞–∫–æ–π ID_TG –∑–∞–¥–∞—Ç—å?")
        else:
            await message.answer("–≠—Ç–æ –ª—É—á—à–µ –Ω–µ –º–µ–Ω—è—Ç—å :)")
            await state.finish()
            return 0


async def upd_tg_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tg_id'] = message.text
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TG_ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    try:
        await conn.execute('''call add_id_tg($2, $1)''', int(data['id_user']), int(data['tg_id']))
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {data['id_user']} –ø–æ–ª—É—á–∏–ª TG_ID = {data['tg_id']} !!!")
    except:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {data['id_user']} –Ω–µ –ø–æ–ª—É—á–∏–ª TG_ID = {data['tg_id']}...")

    await conn.close()
    await state.finish()


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ AddEquip
####################################################################################


"""–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ò–º—è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
@dp.message_handlers(commands='AddEquip', state=None)"""


async def cm_start_add_equip(message: types.Message):
    await FSMAdmin.name_equip.set()
    await message.answer("|...–ó–∞–ø—É—Å–∫ –î–∏–∞–ª–æ–≥–∞...|\n|...–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "
                         "<b>¬´–û—Ç–º–µ–Ω–∞¬ª</b>...|\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                         parse_mode="HTML")


"""–ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–∞—Ç—å
@dp.message_handlers(state=FSMAdmin.name_equip)"""


async def load_name_equip(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name_equip'] = message.text
        await FSMAdmin.next()
        await message.answer(f"–ö–∞–∫–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ø—Ä–∏—Å–≤–æ–∏—Ç—å {data['name_equip']}")
        # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –ü–æ–ª—å–∑
        try:
            conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                         database=config.database, host=config.host, port=config.port_bd)
        except:
            print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
            exit()

        rows = await conn.fetch(
            '''select "–ù–æ–º–µ—Ä_–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞", "–§–∞–º–∏–ª–∏—è", "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" from "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π"''')
        await conn.close()
        str_row = "<b>ID_EMPL | FAM_EMPL | PROF </b>"
        for row in rows:
            str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]) + " | " + str(row[2]))
        await message.answer(str_row, parse_mode="HTML")


"""–ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ù–æ–º–µ—Ä –õ–∞–±—ã
@dp.message_handlers(state=FSMAdmin.id_equip_empl)"""


async def load_id_equip_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_empl'] = message.text
    await FSMAdmin.next()
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ù–æ–º–µ—Ä –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è {data['name_equip']}")
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –õ–∞–±—ã
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"''')
    await conn.close()
    str_row = "<b>ID_LAB | NAME_LAB </b>"
    for row in rows:
        str_row += "\n" + ("  " + str(row[0]) + " | " + str(row[1]))
    await message.answer(str_row, parse_mode="HTML")


"""–ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handlers(state=FSMAdmin.profession)"""


async def load_equip_lab(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['lab'] = message.text

        try:
            conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                         database=config.database, host=config.host, port=config.port_bd)
        except:
            print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
            exit()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        try:
            await conn.execute('''call add_equipment($1,$2,$3)
                ''', data["name_equip"], int(data["id_empl"]), int(data["lab"]))
            await message.answer(
                f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å!!!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name_equip']}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞: {data['id_empl']}\n"
                f"–õ–∞–±–∞: {data['lab']}"
                f"\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å!!!")
        except:
            await message.answer("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ù–ï –¥–æ–±–∞–≤–∏–ª–æ—Å—å")

    await state.finish()


####################################################################################
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ DeleteEquip
####################################################################################


"""–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, –°–ø—Ä–∞—à–∏–≤–∞–µ–º id
@dp.message_handlers(commands='DeleteEquip', state=None)"""


async def cm_start_del_equip(message: types.Message):
    await FSMAdmin.id_empl_equip_del.set()
    await message.answer(
        "|...–ó–∞–ø—É—Å–∫ –î–∏–∞–ª–æ–≥–∞...|\n|...–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ <b>¬´–û—Ç–º–µ–Ω–∞¬ª</b>...|"
        "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
        parse_mode="HTML")

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª—ã –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    try:
        conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                     database=config.database, host=config.host, port=config.port_bd)
    except:
        print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
        exit()

    rows = await conn.fetch('''select * from "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"''')
    await conn.close()
    str_row = "<b>ID_EQUIP | ID_LAB | ID_EMPL | NAME_EQUIP </b>"
    for row in rows:
        str_row += "\n" + (
                "     " + str(row[0]) + "     |       " + str(row[1]) + "    |    " + str(
            row[2]) + "     |       " + str(row[3]))
    await message.answer(str_row, parse_mode="HTML")


async def del_equip_funk(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_equip'] = message.text
        if data['id_equip'] in ['1', '2', '3', '4', '5', '6', '7', "8", "9", "10"]:
            await message.answer("–≠—Ç–æ –ª—É—á—à–µ –Ω–µ —É–¥–∞–ª—è—Ç—å :)")
            await state.finish()
            return 0
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            try:
                conn = await asyncpg.connect(user=config.user_bd, password=config.password_bd,
                                             database=config.database, host=config.host, port=config.port_bd)
            except:
                print("\n========= –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î =========")
                exit()

            try:
                await conn.execute('''call del_equip($1)''', int(data['id_equip']))
                await message.answer(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å id = {data['id_equip']} —É–¥–∞–ª–µ–Ω–æ!!!")
            except:
                await message.answer(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å id = {data['id_equip']} –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å...")

            await conn.close()
            await state.finish()


####################################################################################
# –ë–ª–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
####################################################################################


def register_handlers_db(dp: Dispatcher):
    dp.register_message_handler(staj_user, Text(equals="–°—Ç–∞–∂", ignore_case=True))
    dp.register_message_handler(zp_user, Text(equals="–ó–ü", ignore_case=True))
    dp.register_message_handler(tool_user, Text(equals="–ú–æ—ë –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", ignore_case=True))
    dp.register_message_handler(prize_user, Text(equals="–ü—Ä–µ–º–∏—è", ignore_case=True))

    dp.register_message_handler(get_users, Text(equals="–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", ignore_case=True))
    dp.register_message_handler(get_equip, Text(equals="–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", ignore_case=True))
    dp.register_message_handler(lab_fail, Text(equals="–ü—Ä–æ–≤–∞–ª –õ–∞–±—ã", ignore_case=True))
    dp.register_message_handler(prod_proc, Text(equals="–°–æ–±–∏—Ä–∞–µ–º—ã–µ –∏–∑–¥", ignore_case=True))
    dp.register_message_handler(max_prod, Text(equals="MAX PROD", ignore_case=True))
    dp.register_message_handler(good_empl, Text(equals="Good empl", ignore_case=True))

    dp.register_message_handler(cancel_handler, Text(equals="–û—Ç–º–µ–Ω–∞", ignore_case=True), state="*")

    dp.register_message_handler(cm_start_add, Text(equals="AddUser", ignore_case=True), state=None)
    dp.register_message_handler(load_firstname, state=FSMAdmin.firstname_empl)
    dp.register_message_handler(load_surname, state=FSMAdmin.surname_empl)
    dp.register_message_handler(load_profession, state=FSMAdmin.profession)

    dp.register_message_handler(cm_start_add_equip, Text(equals="AddEquip", ignore_case=True), state=None)
    dp.register_message_handler(load_name_equip, state=FSMAdmin.name_equip)
    dp.register_message_handler(load_id_equip_name, state=FSMAdmin.id_equip_empl_add)
    dp.register_message_handler(load_equip_lab, state=FSMAdmin.id_equip_lab)

    dp.register_message_handler(cm_start_del, Text(equals="DeleteUser", ignore_case=True), state=None)
    dp.register_message_handler(del_user, state=FSMAdmin.id_empl)

    dp.register_message_handler(cm_start_del_equip, Text(equals="DeleteEquip", ignore_case=True), state=None)
    dp.register_message_handler(del_equip_funk, state=FSMAdmin.id_empl_equip_del)

    dp.register_message_handler(cm_start_staj, Text(equals="+–°—Ç–∞–∂", ignore_case=True), state=None)
    dp.register_message_handler(update_staj, state=FSMAdmin.id_empl_staj)

    dp.register_message_handler(cm_start_prize_upd, Text(equals="+–ü—Ä–µ–º–∏—è", ignore_case=True), state=None)
    dp.register_message_handler(update_prize_coun, state=FSMAdmin.id_empl_prize)
    dp.register_message_handler(upd_prize_user, state=FSMAdmin.upd_prize_count)

    dp.register_message_handler(cm_start_tg_id, Text(equals="UPD_TG", ignore_case=True), state=None)
    dp.register_message_handler(update_tg_id_get, state=FSMAdmin.id_empl_tg)
    dp.register_message_handler(upd_tg_id, state=FSMAdmin.upd_tg)
